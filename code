#include<bits/stdc++.h>
using namespace std;
class SquareRootDecomposition {
private:
    vector<int> arr;
    vector<int> blockSums;
    int blockSize;
public:
    SquareRootDecomposition(const vector<int>& input) {
        arr = input;
        int n = arr.size();
        blockSize = sqrt(n);
        blockSums.resize((n + blockSize - 1) / blockSize, 0);

        for (int i = 0; i < n; ++i) {
            blockSums[i / blockSize] += arr[i];
        }
    }
    void update(int index, int value) {
        int blockIndex = index / blockSize;
        blockSums[blockIndex] += value - arr[index];
        arr[index] = value;
    }
    int query(int L, int R) {
        int sum = 0;
        int startBlock = L / blockSize;
        int endBlock = R / blockSize;
        if (startBlock == endBlock) {
            for (int i = L; i <= R; ++i) {
                sum += arr[i];
            }
        } else {
            for (int i = L; i < (startBlock + 1) * blockSize; ++i) {
                sum += arr[i];
            }
            for (int i = startBlock + 1; i < endBlock; ++i) {
                sum += blockSums[i];
            }
            for (int i = endBlock * blockSize; i <= R; ++i) {
                sum += arr[i];
            }
        }
        return sum;
    }
};

int main() {
    int n, q;
    cin >> n >> q;
    vector<int> input(n);
    for (int i = 0; i < n; ++i) {
        cin >> input[i];
    }
    SquareRootDecomposition sqrtDecomp(input);
    for (int i = 0; i < q; ++i) {
        string command;
        cin >> command;
        if (command == "UPDATE") {
            int index, value;
            cin >> index >> value;
            sqrtDecomp.update(index - 1, value);
        } else if (command == "QUERY") {
            int L, R;
            cin >> L >> R;
            cout << sqrtDecomp.query(L - 1, R - 1) << endl;
        }
    }
    return 0;
}
